[
  ///////////////////////////////////////////////////////////////////////////////
  // KEYMAPS: Some are defined in this file, some are default where we could not over-ride
  //
  // TERMINAL & PANEL MANAGEMENT:
  // cmd-j → terminal_panel::ToggleFocus (Workspace)
  // cmd-shift-j → workspace::ToggleRightDock (Workspace, Terminal, AgentPanel) Closes the right dock if open
  // cmd-l → agent::ToggleFocus (Terminal)
  //
  // GIT:
  // cmd-shift-g → git_panel::ToggleFocus (Workspace, Editor)
  // cmd-g up → git::Push (Workspace)
  // cmd-y       → Stage
  // ctrl-cmd-y  → Stage All
  //
  // TMUX-LIKE PANE MANAGEMENT:
  // ctrl-b % → pane::SplitRight (Workspace)
  // ctrl-b " → pane::SplitDown (Workspace)
  // ctrl-b h/left → workspace::ActivatePaneLeft (Workspace)
  // ctrl-b up/down → workspace::ActivatePaneUp/Down (Workspace)
  // ctrl-b j/k → workspace::ActivateNextPane (Workspace)
  // ctrl-b l/right → workspace::ActivatePaneRight (Workspace)
  // ctrl-b z → workspace::ToggleZoom (Workspace)
  //
  // SMART AGENT KEYBINDINGS (VIM MODE):
  // cmd-l → assistant::QuoteSelection (Editor && vim_mode == visual)
  // cmd-l → agent::ToggleFocus (Editor && vim_mode == normal)
  // cmd-l → agent::ToggleFocus (Workspace fallback) In the agent pane, go to normal mode for the toggle to work
  //
  // DEFAULT AGENT KEYMAPS REFERENCE:
  // cmd+shift+a → agent::ToggleContextPicker - Files to use in agent panel. Could not over-ride
  ///////////////////////////////////////////////////////////////////////////////

  {
    /////////////////////////////////////////////////////////////////////////////////////
    // In editor/anywhere: pressing Cmd+J spawns a new terminal
    // If there was an existing terminal, it will open just that terminal
    // Cmd+shift+j will just close that terminal
    "context": "Workspace",
    "bindings": {
      "cmd-j": "terminal_panel::ToggleFocus",
      "cmd-shift-j": "workspace::ToggleRightDock"
    }
  },
  {
    // When focus is already in the terminal: Cmd+J sends focus back
    "context": "Terminal",
    "bindings": {
      "cmd-j": "terminal_panel::ToggleFocus",
      "cmd-shift-j": "workspace::ToggleRightDock",
      // Also toggle on agent from inside terminal
      "cmd-l": "agent::ToggleFocus"
    }
  },
  {
    // When focus is in the AgentPanel have the toggle setup work as the workspace
    "context": "AgentPanel",
    "bindings": {
      "cmd-shift-j": "workspace::ToggleRightDock",
      "cmd-l": "agent::ToggleFocus"
    }
  },
  /////////////////////////////////////////////////////////////////////////////////////
  // Git - Not yet happy with git. Cmd-y seems to be the only way to use it
  // Right now, we use Cmd-y to stage, Cmd + Enter to write commit and
  // Cmd + Enter to commit. Finally Cmd + g + up to push
  /////////////////////////////////////////////////////////////////////////////////////
  {
    "context": "Workspace",
    "bindings": {
      "cmd-shift-g": "git_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "cmd-shift-g": "git_panel::ToggleFocus"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      "cmd-g up": "git::Push"
    }
  },
  {
    // Stop command pallete from opening when typing : in vim normal mode
    // However, this disables : completely.
    // "context": "Editor && vim_mode == normal && !menu",
    // "bindings": { ":": null }
  },
  {
    // Tmux like keybindings
    "context": "Workspace",
    "bindings": {
      // ---- Splits ----
      "ctrl-b %": "pane::SplitRight", // like tmux % (vertical split)
      "ctrl-b \"": "pane::SplitDown", // like tmux " (horizontal split)

      "ctrl-b h": "workspace::ActivatePaneLeft",
      "ctrl-b left": "workspace::ActivatePaneLeft",

      "ctrl-b up": "workspace::ActivatePaneUp",
      "ctrl-b down": "workspace::ActivatePaneDown",

      "ctrl-b j": "workspace::ActivateNextPane",
      "ctrl-b k": "workspace::ActivateNextPane",

      "ctrl-b l": "workspace::ActivatePaneRight",
      "ctrl-b right": "workspace::ActivatePaneRight",

      // Full focus on a specific panel
      "ctrl-b z": "workspace::ToggleZoom"
    }
  },
  /////////////////////////////////////////////////////////////////////////////////////
  // AgentPanel - Make cmd-l be the default way to interact with the agent panel
  /////////////////////////////////////////////////////////////////////////////////////
  {
    // Agent panel - when text is selected (visual mode), quote it and move to agent
    "context": "Editor && vim_mode == visual",
    "bindings": {
      "cmd-l": "assistant::QuoteSelection"
    }
  },
  {
    // Agent panel - when no text selected (normal mode), toggle focus
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "cmd-l": "agent::ToggleFocus"
    }
  },
  {
    // Agent panel - When entering text in the agent panel we seem to be in Editor mode actually
    // So we need this additional handling to make sure `cmd-l` always does the right thing
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "cmd-l": "agent::ToggleFocus"
    }
  },
  {
    // Agent panel - workspace level binding as fallback
    "context": "Workspace",
    "bindings": {
      "cmd-l": "agent::ToggleFocus"
    }
  }
]
